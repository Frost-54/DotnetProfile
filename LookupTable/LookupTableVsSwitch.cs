using BenchmarkDotNet.Attributes;

namespace DotnetProfile.LookupTable; 

[Description("C# switch vs lookup table performance")]
[BenchmarkClass("LookupTable")]
public class LookupTableVsSwitch {
      private char c;

      [IterationSetup]
      public void Setup() {
            c = Random.Shared.Next(0, 15).ToString("X")[0];
      }
      
      [Benchmark]
      public byte LookupTableArray() {
            ReadOnlySpan<byte> table = new byte[] {
                  255, 255, 255, 255, 255, 255, 255, 255,  // 0..7
                  255, 255, 255, 255, 255, 255, 255, 255,  // 8..15
                  255, 255, 255, 255, 255, 255, 255, 255,  // 16..23
                  255, 255, 255, 255, 255, 255, 255, 255,  // 24..31
                  255, 255, 255, 255, 255, 255, 255, 255,  // 32..39
                  255, 255, 255, 255, 255, 255, 255, 255,  // 40..47
                  0,   1,   2,   3,   4,   5,   6,   7,    // 48..55    '0' == 48
                  8,   9,   255, 255, 255, 255, 255, 255,  // 56..63    '9' == 57
                  255, 10,  11,  12,  13,  14,  15,  16,   // 64..71    'A' == 65
                  17,  18,  19,  20,  21,  22,  23,  24,   // 72..79
                  25,  26,  27,  28,  29,  30,  31,  32,   // 80..87
                  33,  34,  35,  255, 255, 255, 255, 255,  // 88..95    'Z' == 90
                  255, 10,  11,  12,  13,  14,  15,  16,   // 96..103   'a' == 97
                  17,  18,  19,  20,  21,  22,  23,  24,   // 104..111
                  25,  26,  27,  28,  29,  30,  31,  32,   // 112..119
                  33,  34,  35,  255, 255, 255, 255, 255,  // 120..127  'z' == 122
            };

            return table[c];
      }
      
      [Benchmark]
      public byte LookupTableSpan() {
            ReadOnlySpan<byte> table = new byte[] {
                  255, 255, 255, 255, 255, 255, 255, 255,  // 0..7
                  255, 255, 255, 255, 255, 255, 255, 255,  // 8..15
                  255, 255, 255, 255, 255, 255, 255, 255,  // 16..23
                  255, 255, 255, 255, 255, 255, 255, 255,  // 24..31
                  255, 255, 255, 255, 255, 255, 255, 255,  // 32..39
                  255, 255, 255, 255, 255, 255, 255, 255,  // 40..47
                  0,   1,   2,   3,   4,   5,   6,   7,    // 48..55    '0' == 48
                  8,   9,   255, 255, 255, 255, 255, 255,  // 56..63    '9' == 57
                  255, 10,  11,  12,  13,  14,  15,  16,   // 64..71    'A' == 65
                  17,  18,  19,  20,  21,  22,  23,  24,   // 72..79
                  25,  26,  27,  28,  29,  30,  31,  32,   // 80..87
                  33,  34,  35,  255, 255, 255, 255, 255,  // 88..95    'Z' == 90
                  255, 10,  11,  12,  13,  14,  15,  16,   // 96..103   'a' == 97
                  17,  18,  19,  20,  21,  22,  23,  24,   // 104..111
                  25,  26,  27,  28,  29,  30,  31,  32,   // 112..119
                  33,  34,  35,  255, 255, 255, 255, 255,  // 120..127  'z' == 122
            };

            return table[c];
      }
      
      [Benchmark]
      public byte Switch() {
            return c switch {
                  '0' => 0,
                  '1' => 1,
                  '2' => 2,
                  '3' => 3,
                  '4' => 4,
                  '5' => 5,
                  '6' => 6,
                  '7' => 7,
                  '8' => 8,
                  '9' => 9,
                  'a' => 10,
                  'b' => 11,
                  'c' => 12,
                  'd' => 13,
                  'e' => 14,
                  'f' => 15,
                  'A' => 10,
                  'B' => 11,
                  'C' => 12,
                  'D' => 13,
                  'E' => 14,
                  'F' => 15,
                  _ => 255
            };
      }
}